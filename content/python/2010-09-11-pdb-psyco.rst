
Making pdb work with psyco
##########################


:date: 2010-09-11 10:20
:modified: 2015-06-20 22:05
:category: Python
:tags: python, pdb, psyco
:slug: pdb-psyco
:authors: sevas
:summary: Psyco ate my stack frames




.. note::

    This is a rewrite of an old blog post from way back, it
    still might be useful so I'm throwing it on here.

`Pdb <http://docs.python.org/library/pdb.html>_`, the standard python debugger,
does not play nice with [psyco](http://psyco.sourceforge.net/). Or maybe it's
the opposite. To illustrate this, let's start with a simple python program, that
will surely provoke a breakpoint:


.. gist:: sevas/575083 hello_pdb.py python

A debugging session with pdb should look like that:


.. gist:: sevas/575099 pdb_psyco_session

So, what happenned here?

* We start a pdb debugging session on the hello_pdb.py file
* the pdb command `c` (continue) starts the program
* The program throws a `ZeroDivisionError`, pdb enters post-mortem
   debugging
* We try to inspect the environment : the variable `arg` does not exist,
   the `locals()` dictionnary is empty.

The reason for that is, when psyco is active, all your psyco-compiled functions,
along with their stack frames, are stored away in a secret place which poor pdb
is not aware of.

At least 2 solutions exist. First, you could comment out the ``psyco.full()``
statement for every debug session. However, this isn't always an option, as some
libraries always makes the use of psyco [#f1]_ if it is available. Uncommenting
and recommenting in every third party library is not a reasonable option.

So, how do I seamlessly disable psyco while debugging a module with
Pdb ? After some research, it seemed like the
`pydev <http://pydev.sourceforge.net>`_ eclipse extension had just the
workaround I needed. First, we need a fake psyco module, implementing
the psyco interface. Something like this :


.. gist:: sevas/575112 pdb_psyco_stub.py python


This is just a copy of the *pydevd_psyco_stub.py* file shipped with
pydev, I'm not taking credit for anything here.

Next, we need to tell pdb to replace the psyco entry in ``sys.modules``
with that fake module. This is done through the *.pdbrc* configuration
file. Conveniently, the *.pdbrc* file accepts plain python code, so it's
like super easy and stuff.  Here's my *.pdbrc* :

.. gist:: sevas/575176 dotpdbrc



And that's it.

A few remarks:

* Both *.pdbrc* and *pydevd_psyco_stub.py* need to be in your home directory
* On Windows, this means [#f2]_ putting them in an arbitrary folder, and
  then create a ``%HOME%`` environment variable pointing to that
  directory [#f3]_
* I strongly recommend the use of the ``pprint`` function (especially for
  inspecting your data while debugging)


So what does it mean for our test module from earlier ? Let me show it
to you:

.. gist:: sevas/575180 pdb_psyco_stub_session



Great success.




.. [#f1] This is actually my primary motivation
.. [#f2] Among other options, but I find this one easy enough
.. [#f3] And windows users should use [Rapid Environment Editor](http://www.rapidee.com/en/about) for this.


